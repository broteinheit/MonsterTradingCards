@startuml MonsterTradingCards
class Server {
    -int port

    +void listen()
}

class Connection {
    -string ipAddress
    -Router router

    +void HandleConnection()
}

class User {
    -string username
    -int userId

    +int getUserId()
    +void setUserId(int userId)
    +string getUsername()
    +void setUsername(string username)
}

class Router

interface IRoute

class Logger {
    -string logfile

    +void log(string msg)
    +void debug(string msg)
    +void error(string msg)
}

class Repository {
    -IDatabase db

    +Card getCardById(string cardId)
    +Card getCardByName(string cardName)
    +bool registerUser(string username, string password)
    +User login(string username, string password)
    +bool changeElo(int userId, int eloChange)
    +bool addBattle(int winnerId, int loserId, string logfile)
    +bool addPackage(string packageId, list<Card> cards)
    +Package getPackage(string packageId)
    +Package aquireRandomPackage()
    +CardDeck getDeck(User user)
    +bool setDeck(User user, CardDeck)
    +CardStack getAllCards(User user)
    +Stats getUserStats(User user)
    +Scoreboard getScoreboard()
}

interface IDatabase

class PostGresDatabase

enum BattleState {
    WAITING
    IN_PROGRESS
    DONE
    NONE
}

class Battle {
    -int playerId1
    -int playerId2
    -CardDeck deckP1
    -CardDeck deckP2
    -BattleState state
    -BattleLogic battleLogic

    +Battle(int playerId1, int playerId2)
    +int runBattle()
    -void adjustDecks()
}

class BattleLogic {
    -Logger logger

    +int runRound(Card cardP1, Card cardP2)
    -int calculateRoundWinner(Card cardP1, Card cardP2)
    -void compareCards(Card cardP1, Card cardP2)
}

class CardStack {
    -list<Card> allCards
    -int playerId

    +list<Card> getAllCards()
    +Card getCardByIndex(int cardIdx)
    +Card getCardById(string cardId)
    +void addCardToStack(Card card)
}

class CardDeck {
    -list<Card> cards
    -int playerId

    +Card getCardByIndex(int cardIdx)
    +Card getCardById(string cardId)
    +void addCard(Card card)
    +int getAmountCards()
}

class Package {
    -string packageId
    -list<Card> cards

    +string getPackageId()
    +void setPackageId(string packageId)
    +list<Card> getCards()
    +void setCards(list<Card> cards)
}

abstract class Card {
    #string cardId
    #int playerId
    #string cardName
    #double damage
    #ElementType elementType

    +ElementType getElementType()
    +void setElementType(ElementType elementType)
    +double getDamage()
    +void setDamage(double damage)
    +int getPlayerId()
    +void setPlayerId(int playerId)
    +int getCardId()
    +void setCardId(int cardId)
}

enum ElementType {
    WATER
    FIRE
    NORMAL
}

enum MonsterType {
    GOBLIN
    DRAGON
    WIZARD
    ORK
    KNIGHT
    KRAKEN
    ELVE
    TROLL
}

class MonsterCard {
    -MonsterType MonsterType


    +MonsterType getMonsterType()
    +void setMonsterType(MonsterType monsterType)
}

class SpellCard {

}

Card - ElementType
MonsterCard - MonsterType

MonsterCard --|> Card
SpellCard --|> Card

PostGresDatabase --|> IDatabase

@enduml